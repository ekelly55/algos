what's the walrus operaator?

walrus is an assignment expression: i.e. takes a traditional assignment (statement) and makes it an expression, which returns the assigned value. don't try to use it yet

#helpful string methods: isalpha() check if any string is made up entirely of letters, UPPER OR LOWER   
# str() turn num into string, int() and str into num
#str[:-1] slice off last letter, keep rest of string
#str[::-1] reverse the string
#str[len(str)-1: len(str)] slice off all but last char

#if want to change a value conditionally, place the conditional at the beginning of yr expression. saves time. won't execute function if i doesn't fit condition
#NEED IF ELSE HERE?

original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]

#'make a new list of prices with each price being the original price if it not negative, or set negative prices to zero'
prices = [i if i>0 else 0 for i in original_prices]

LOOK INTO SET AND DICT COMP

DON'T USE LIST COMP w large numbers: use generators. don't store in mem

#Every comprehension of the list can be rewritten in for loop, but in the context of list interpretation, every for loop can not be rewritten. WHAT DOES THIS MEAN?

#watch out for nested comps: that's gonna be n^2. just don't nest when you don't have to. 

    #BUT nested lists are a common way to create matrices, used for math. LOOK INTO MATRICES

#list comp loads entire output into memory. fine for small and medium sized lists, but large will mess up comp. 

#if it's a large list, use a generator instead. a generator returns an iterable, lazy eval= only eval when needed. not stored first in mem. do all generators use lazy eval?

#how to choose (in general): if performance matters (will on interview), then see what's fastest/best for mem. if not, then go with whatever yeilds cleanest code

#can use timeit library to see which is best import it, then call timeit.timeit(func, number=whatever) run it for whatever number of iterations you tell it to. 


remember dict.items() to access each key value pair. otherwise will just access one argument

understand .items, .enumerate, and .fromkeys

.items() returns a list of tupes containing keys and values (allwithin parentheses...not sure what that is)

Lists	Tuples	Sets	Dictionaries
A list is a collection of ordered data.	
A tuple is an ordered collection of data.	
A set is an unordered collection.	
A dictionary is an unordered collection of data that stores data in key-value pairs.

look into classes and when and why to use? certainly when working w/ user defined data structures i.e. stack

what are exceptions and when to use? 

class constructors: don't for get double underscores on def __init__(self)

this doesn't contain anything on linked lists.  HAVE TO LEARN THAT!

also learn all built in data structures and when to use.

# deque (diff from 'dequeue') but isn't htere a library you can import for this?

#it's a double ended queue: can add or remove from either end. all same methods, but for both ends. preferred over list when need to optimize append and pop (and don't nec. need access in between ends). time for deque append and pop are O1, rather tha ON for list append and pop. # input restricted: input limited at one end, deletion permitted on both. output restricted: add to both ends, remove from one. can use collections.deque (import collections) to turn a list into a deque. built in methds are append (right end, as usual) and appendleft (at 0 end) and pop() and popleft()

#deque collections access methods: 
    #index(ele, beg, end): returns index of first occurence of element in args, searching from beg to end
    #insert(i, a): inserts val a at index i
    #remove(a) removes first occurrence of val a
    # count(a) counts number of occurrences of val a 

#access front w/ [0] and back w/ [-1]
#len(deque) method
#extend(iterable): add mult vals to right of deque
#extendleft(iterable): same at front
#reverse()
#rotate(num): rotates deque by num indicated. if neg, rotates left

// floor division: returns int, not float or decimal (what is a float)


.remove() in lists and arrs!!!!!!!! much easier than slicing and concatenation